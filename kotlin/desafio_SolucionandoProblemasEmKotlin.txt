// 5 / 5 - Figurinhas

fun main(args: Array<String>) {
    
    val lista = mutableListOf<Int>()
    
    for (i in 1..readLine()!!.toInt()) {
        val input = readLine()!!.split(" ").map { it.toInt() }
        val tamanhoDoMonte = mdc(input[0], input[1])
        println(tamanhoDoMonte)
    }
}

// máximo divisor comum (chamada recursiva)
fun mdc(n1: Int, n2: Int): Int {
    if (n2 == 0) return n1
    else return mdc(n2, (n1 % n2))
}

//-------------------------------------------

// 4 / 5 - A Corrida de Tartarugas

import java.io.EOFException
import java.lang.NullPointerException

fun main(args: Array<String>) {

    while (true) {
        try {
            val l = readLine()!!.toInt()
            val v = readLine()!!.split(" ").run {
                val ww: MutableList<Int> = mutableListOf<Int>()
                for (i in this) ww.add(i.toInt())
                ww
            }
/*
            Nível 1: Se a velocidade é menor que 10 cm/h .
            Nível 2: Se a velocidade é maior ou igual a 10 cm/h e menor que 20 cm/h .
            Nível 3: Se a velocidade é maior ou igual a 20 cm/h .
*/
            when (v.sorted().last()) {
                in 0..9 -> println(1)
                in 10..19 -> println(2)
                else -> println(3)
            }
        } catch (f : NumberFormatException ) {
            break
        } catch (n : NullPointerException) {
            break
        } catch (e : EOFException) {
            break
        }
    }
}

//-------------------------------------------

// 3 / 5 - Primo Rápido

import kotlin.math.sqrt

fun main(args: Array<String>) {
    //continue a solução
    val n = readLine()!!.toInt()
    var prime = false
        for (i in 1..n){
            val value = try {
                readLine()!!.toLong()
            } catch (e: Exception) {
                break
            }
            prime = true
            val raiz = sqrt(value.toFloat())
        if  (value <= 0L) prime = false
        else {
            when (value) {
                0L -> prime = false
                1L -> prime = true
                2L -> prime = true
                3L -> prime = true
                else -> {
                    if (value % 2 == 0L) prime = false
                    else {
                        var divisor:Int = 3
                        var resto = value % divisor
                        while ((resto != 0L) && (divisor < raiz)) {
                            resto = value % divisor
                            divisor += 2
                        }
                        if (resto == 0L) prime = false
                    }
                }
            }
        }
        if (prime) println("Prime")
        else println("Not Prime")
    }
}

//-------------------------------------------

// 2 / 5 - Área do Círculo

import java.math.BigDecimal
import java.math.RoundingMode
import kotlin.math.pow

fun main(args: Array<String>) {
    
    val raio = readLine()?.toDouble() ?: 0.0
    val pi = (3.14159).toDouble()
    val area = (pi * raio.pow(2))
    val resultado = BigDecimal( area   ).setScale(4, RoundingMode.HALF_EVEN)
    println("A=$resultado")
}

//-------------------------------------------

// 1 / 5 - Taxa de Imposto de Renda

fun main(args: Array<String>) {
    //continue a solução
    fun Float.format(digits: Int) = "%.${digits}f".format(this).replace(',','.')
    val r = readLine()!!.toFloat()
    var i = 0F
    
    if (r <= 2000 ) {
        i = (0F)
    } else if (r > 2000 && r <= 3000) {
        i = ((r - 2000) * 0.08).toFloat()
    } else if (r > 3000 && r <= 4500 ) {
        i = ((r - 3000) * 0.18 + 1000 * 0.08).toFloat()
    } else if (r > 4500) {
        i = ((r -  4500) * 0.28 + 1500 * 0.18 + 1000 * 0.08).toFloat()
    }
    if (i == 0F) println("Isento") else println("R$ ${i.format(2)}")
}

