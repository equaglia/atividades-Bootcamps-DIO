// 5 / 5 - Figurinhas

fun main(args: Array<String>) {
    
    val lista = mutableListOf<Int>()
    
    for (i in 1..readLine()!!.toInt()) {
        val input = readLine()!!.split(" ").map { it.toInt() }
        


    }
    println(       ("\n"))
}

// máximo divisor comum (chamada recursiva)
fun mdc(n1: Int, n2: Int): Int {
   
}

// Solucao

//-------------------------------------------

// 4 / 5 - A Corrida de Tartarugas

import java.io.EOFException

fun main(args: Array<String>) {
    
    while (true) {
    
        try {
        
            val l = readLine()!!.toInt()
            val v = readLine()!!.split("        ").run {     {      () } }
            v.sort()
            when (v.last()) {
              
            }
    
        } catch (f :  ) {
            break
        } catch (n : ) {
            break
        } catch (e :) {
            break
        }
    }
}

// Solucao

//-------------------------------------------

// 3 / 5 - Primo Rápido

fun main(args: Array<String>) {
    //continue a solução
    val n =
    
    for (    ) {
        
    
    }
    
}

// Solucao

fun main(args: Array<String>) {
    //continue a solução
    //var numb: Int = 0
    //try {
    //  numb = readLine()?.toInt() ?: 0
    //} catch (e: NumberFormatException) {
  //    numb = 0
  //  }
    //val n = numb
    val n = readLine()?.toInt() ?: 0
    var prime: Boolean = false
    var value:Int = 0
    //var m = n
    if (n > 200) m = 200
    for ( i in 1..m ) {
      try {
        value = readLine()?.toInt() ?: 0
      } catch(e: NumberFormatException) {
        value = 0
      }
      prime = false
      if (value !is Int) prime = false
      else if (value <= 0) prime = false
      //else if ((value <= 0) || (value >= 231)) prime = false // com esta linha testes 4 e 5 nao funcionam
      else {
        when (value) {
            1 -> prime = true
            2 -> prime = true
            3 -> prime = true
            else -> {
                if (value % 2 == 0) prime = false
                else {
                    var divisor:Int = 3
                    var resto = value % divisor
                    while ((resto != 0) && (value / divisor > 1)) {
                        resto = value % divisor
                        divisor += 2
                    }
                    if (resto == 0) prime = false
                    else prime = true
                }
            }
        }
    }
    if (prime) {
        println("Prime")
    } else {
        println("Not Prime")
    }
  }
}

//-------------------------------------------

// 2 / 5 - Área do Círculo

import java.math.BigDecimal
import java.math.RoundingMode
import kotlin.math.pow

fun main(args: Array<String>) {
    
    val raio = 
    val pi = 
    val area = 
    val resultado = BigDecimal(    ).setScale(0, RoundingMode.HALF_EVEN)
    println("A=     ")
    
}

// Solucao

import java.math.BigDecimal
import java.math.RoundingMode
import kotlin.math.pow

fun main(args: Array<String>) {
    
    val raio = readLine()?.toDouble() ?: 0.0
    val pi = (3.14159).toDouble()
    val area = (pi * raio.pow(2))
    val resultado = BigDecimal( area   ).setScale(4, RoundingMode.HALF_EVEN)
    println("A=$resultado")
    
}

//-------------------------------------------

// 1 / 5 - Taxa de Imposto de Renda
fun main(args: Array<String>) {
    //continue a solução
    fun Float.format(digits: Int) = "%.${digits}f".format(this).replace(',','.')
    val r = readLine()!!.toFloat()
    var i = 0F
    
    if (r <= 2000 ) {
        i = (0F)
    } else if (r > 2000 && r <= 3000) {
        i = ((r - 2000) * 0.08).toFloat()
    } else if (r > 3000 && r <= 4500 ) {
        i = ((r - 3000) * 0.18 + 1000 * 0.08).toFloat()
    } else if (r > 4500) {
        i = ((r -  4500) * 0.28 + 1500 * 0.18 + 1000 * 0.08).toFloat()
    }
    if (i == 0F) println("Isento") else println("R$ ${i.format(2)}")
}

